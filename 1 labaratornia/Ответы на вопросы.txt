1. Что такое система контроля версий и для чего ее используют?
Система контроля версий — это система, записывающая изменения в файл или набор файлов в течение времени и позволяющая вернуться позже к определённой версии.
Система контроля версий нужна для помощи разработчикас в создании проектов. Допустим ситуация когда разработчик изменил файл таким образом, что весь проект стал работать намого хуже и не хочет тратить своё драгоценное время на редактирование
 его до прошло версии, для этого ис уществует СКВ (СИСТЕМЫ КОНТРОЛЯ ВЕРСИЙ) с помощью которых вы можте окатить ваш проект до определенного сохранения, что значительно облегчает работу разработчику.
2.Какой принцип хранения файлов использует Git?
Основной принцип хранения файлов в GIT не такой как в других СКВ, в отличии от них (ПРИМЕРЫ ТАКИХ СКВ CVS, Subversion, Perforce, Bazaar и т. д.) гит не сохраняет файлы по ОТДЕЛЬНОСТИ, записывая их в список 
то есть другие системы работают таким образом:
у вас есть проект который включает в себя 2 файла txt и html
вы их сохраняли неоднократное количество раз 
и в какой момент вы решили сохранить только файл html
другая СКВ заомнит сохранение файла html а вот на файл txt будет ссылаться на предущее сохранение 
ГИТ в отличии от таких СКВ сохранит оба файла сразу, то есть он зафиксирует не только файл html но и файл txt (ОБразно  говоря делая некий скриншот проета на данный момент сохранения)
3. В чем отличие git от других систем контроля версий? (ОТВЕТ А ВОПРОС ОПИСАН ВЫШЕ)
ВЫШЕ СУКА СМОТРИ БЛЯТЬ
4.В каких трех основных состояниях файлы могут находиться в Git ?
Файлы в ГИТ могут находиь в 3-х состояних :
1 -ое ИЗМЕНЕННЫЕ
ОНИ БУДУТ подписаны modifed то есть ты тварина решила свой проект улучшить и не сохранился сука блять вот гит и добавил их в такое состояние
2-ое ИНДЕКСИРОВАННЫЙ файл который добавлен в следующий commit  но еще не был закомичен 
3-ое ЗАФИКСИРОВАННЫе то есть ты молодец умница солнышко сохранил все commit cделал умница!
5. Что такое индексация файла? Какой командой она выполняется?
Про индексацию ВЫШЕ ЧИТАЙ 
Область индексирования — это файл, обычно находящийся в каталоге Git, в нём содержится информация о том, что попадёт в следующий коммит. Её техническое название на языке Git — «индекс», но фраза «область индексирования» также работает.
Если определённая версия файла есть в каталоге Git, эта версия считается зафиксированной (committed). Если файл был изменён и добавлен в индекс, значит, он индексирован (staged). И если файл был изменён с момента последнего распаковывания из репозитория, 
но не был добавлен в индекс, он считается изменённым (modified)
КОМАНДА git add
6. Что такое фиксация файла? Какой командой она выполняется?
грубо говоря это сохранения файла в какой-то момент его сохранения(ВЫПОЛНЯЕТСЯ КОМАНДОЙ git commit -m "ВАШ УМНЫЙ ТЕКСТ")
7. Продемонстрируйте команду проверки выбранных настроек.
то есть ты решил что будет круто через команду git config(команда настроек) добавить немного инфы о себе, как вконтактике,вводя команду git config email "УБЛЮДСКАЯПОЧТА@govnomail.com"
и спустя пару лет разработки понял что как бы надо бы проверить а правильно ли ввел свое почту ЭТО ДЕЛАЕТСЯ ЧЕРЕЗ КОМАНДУ git config --list 
8.Как инициализировать репозиторий в существующей папке?
git init (сокращение от Initialization) ну еще нужно догадаться кликнуть правой кнопкой мыши в вашей папке от открыть GIT BASH
а если ты хочешь выебнуться своими знаниями с прошлого сема то можешь показать преподу как круто ты перходишь по папкам вверх-вниз медленно добираясь до нужной
9. Как указать файлы, за которыми должна следить система?
вопрос мега тупой
git add  ФАЙЛ_С_ВАШИМ_КРУТЫМ_КОДОМ
10.Как выполнить фиксацию изменений?
git commit ВСЁ
11.Какой командой определить состояния файлов?
если ты не пидорас запоминай GIT STATUS
эта та команда которую нужно вводить после каждой команды чтобы ты потом понимал что за хуйню ты собсна сделал.
12..Для чего создается файл .gitignore?Поясните его структуру.
сам ищи 
а если серьезно то это такой файлик который содержит в себе расширения файлов которые ты не хочешь отслеживать сохранять и добавлять в удаленный репозиторий (на счет первых двух не уверена я же не гений блять)
13.Как используется команда git diff?
если ты претендуешь на  повышенную стипуху  то уже  догадался что diff от слова difference то есть эта команда сранвиает 2 файла после их изменения выводя разницу  на мониторе твой нового макбука.
14..Как используется команда git commit?
Я хз кто подумал добавить по сути один и тот же вопрос уже в 100 раз 
но объясню 
КОМАНДА ИСПОЛЬЗУЕТСЯ КОГДА ты готов сохранить все свои изменения
а еще нужно обязательно добавить комментарий 
написать так не получится git commit -m "" за  пустой комент тебя выебут в очко так что напряги палец и тыкни хоть букву.
15. .Как используется команда git log? Какие у нее есть параметры?
Команда git log выводит в обратном хронологическом порядке список сохраненных в данный репозиторий 
версий. То есть первыми показываются самые свежие коммиты. Как видите, рядом с каждым коммитом 
указывается его контрольная сумма SHA-1, имя и электронная почта автора, дата создания и сообщение о 
фиксации.
этот текст для тех кому лень читать методичку 
Одним из самых полезных аргументов является -p или --patch, который показывает разницу (выводит патч), внесенную в каждый коммит. Так же вы можете ограничить количество записей в выводе команды; используйте параметр -2 для вывода только двух записей
если вы хотите увидеть сокращенную статистику для каждого коммита, вы можете использовать опцию --stat
--pretty. Эта опция меняет формат вывода. Существует несколько встроенных вариантов отображения. Опция oneline выводит каждый коммит в одну строку, что может быть очень удобным\
 если вы просматриваете большое количество коммитов. К тому же, опции short, full и fuller делают вывод приблизительно в том же формате, но с меньшим или большим количеством информации соответственно:
Таблица 1. Полезные опции для git log --pretty=format
Опция	Описания вывода
%H 	Хеш коммита

%h	Сокращенный хеш коммита

%T	Хеш дерева

%t	Сокращенный хеш дерева

%P	Хеш родителей

%p	Сокращенный хеш родителей

%an	Имя автора

%ae	Электронная почта автора

%ad	Дата автора (формат даты можно задать опцией --date=option)

%ar	Относительная дата автора

%cn	Имя коммитера

%ce	Электронная почта коммитера

%cd	Дата коммитера

%cr	Относительная дата коммитера

%s	Содержание

А ЭТОТ ТЕКСТ ДЛЯ ТЕХ КТО ДЕНЬГИ ЗА ИНТЕРНЕТ НЕ ЗАПЛАТИЛ
https://git-scm.com/book/ru/v2/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%9F%D1%80%D0%BE%D1%81%D0%BC%D0%BE%D1%82%D1%80-%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D0%B8-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82%D0%BE%D0%B2
а ссылка для самых умных
16.Как используется команда git commit –amend?
Если ты прочитал эту команду и непонял  что с ней делать, то явно  не ходил на англ в унике предпочитая покушать бутербродики с кофе в соседнем HOTFIX-е 
amend означает измененный (НУЖНАЮЩИЙСЯ В РЕДАКТИРОВАНИИ)
А если ты совсем умственно отсталый то команда используется когда ты насохранл свой говно джуниорский код и до тебя дошло что ты хуйню сделал и решил ввести какие-то модификации в предыдущее сохранение
в общем команда :то удобный способ изменить последний коммит. Она позволяет объединить проиндексированные изменения с предыдущим коммитом без создания нового коммита
для дополнительной инфы все таки придеться заплатить за интернет
меня кстати оса укусила
17.Как отобразить удаленные репозитории?
никак 
ты пидор 



git remote -v
все

18.Как извлечь данные из удаленного репозитория?
git fetch origin  "ссылка"
все
за остальные ответты деньги мне плати 
где 20 рублей?


19..Как отправить данные в удаленный репозитроий?
git push origin master
20.Какая команда позволяет отобразить удаленные репозитории,
связанные с текущим локальным?
git fetch. Команда git fetch связывается с удалённым репозиторием и забирает из него все изменения, которых у вас пока нет и сохраняет их локально.
21.Каким образом можно получить изменения из удаленного
репозитория в локальный?
git pull
22.Для чего используется команда fetch? В чем отличие команды fetch
от pull?
Команда pull автоматически сливает коммиты, не давая вам сначала просмотреть их. Если вы не пристально следите за ветками, 
выполнение этой команды может привести к частым конфликтам. При использовании fetch , git собирает все коммиты из целевой ветки, которых нет в текущей ветке, и сохраняет их в локальном репозитории
23.Для чего используется команда merge? В чем отличие merge от
rebase?
Merge - это средство интеграции изменений из двух (и даже более) последовательностей изменений. Когда вы хотите сказать - я беру изменения из своей ветки и из другой, и совмещаю их друг с другом - вам нужно делать merge.
Rebase - это средство автоматического или полуавтоматического редактирования истории изменений. Вернее даже не редактирования, нет. Это средство СОЗДАНИЯ новой последовательности изменений на основе имеющейся. А теперь давайте подумаем, когда это бывает нужно:
вы упороли в каком-то коммите, сделанном в начале недели, оставили в правках пароль/приватный ключ и т.п., но не успели залить ветку в публичное место. Хочется пароль удалить, но все остальные коммиты (которых уже 20 штук набралось с тех пор) оставить как есть.
вас попросили убрать из ветки некоторые обособленные изменения. Вы понимаете, что вполне могли бы выбросить пару коммитов как раз с этими изменениями;
у вас в компании стандарт на формат коммит-месседжей, но вы сделали пару неудачных сообщений в вашей ветке и вам нужно их поправить;
вам нужно поправить имя/почту в ваших коммитах.
24. Что такое pull request?
Pull request'ы позволяют вам рассказать другим о тех изменениях, которые вы разместили в своём GitHub-репозитории. Как только pull request отправлен, заинтересованные стороны рассматривают ваши изменения, 
обсуждают возможные правки или даже добавляют дополняющие коммиты, если нужно
25. Какая команда позволяет отобразить историю репозитория?
git log
параметр -p показывает разницу межд каждым коммитом
26.Продемонстируйте создание новых веток в Git? Что такое
ветвление? Что такое указатель HEAD?
создание веток в git 
 git checkout -b iss53 === $ git branch iss53
$ git checkout iss53
Вы решаете, что теперь вы будете заниматься проблемой #53 из вашей системы отслеживания ошибок. Чтобы создать ветку и сразу переключиться на нее, можно выполнить команду git checkout с параметром -b:
HEAD указывает на нее 
HEAD — это указатель на текущую ветку, которая, в свою очередь, является указателем на последний коммит, сделанный в этой ветке. Это значит, что HEAD будет родителем следующего созданного коммита. Как правило, самое простое считать HEAD снимком вашего последнего коммита.
27.Как используется команда git checkout?
это переключение на другую ветку с параметром -b => переключение плюс создание новой ветки
28.Как выполнить включение изменений из одной ветки в другую?
git merge 
29.9.Какие проблемы могут быть при слиянии и как они разрешаются?
Конфликт возникает, когда в двух ветках была изменена одна и та же строка в файле или когда некий файл удален 
в одной ветке и отредактирован в другой. Как правило, конфликты возникают при работе в команде. Существует множество способов разрешения конфликтов слияния.
30.Что такое GitLab?
GitLab — это веб-приложение на основе базы данных, так что его установка немного сложней, чем у некоторых других серверов Git.
 К счастью, этот процесс хорошо документирован и поддерживается. GitLab настоятельно рекомендует установить GitLab на ваш сервер через официальный пакет Omnibus GitLab.
Пользователи в GitLab — это учётные записи, соответствующие людям. Пользовательские учётные записи не очень сложны; в основном это набор персональной информации, прикреплённый к имени. 
У каждого пользователя есть пространство имён, логически группирующее проекты данного пользователя. Если у пользователя jane есть проект project, адрес этого проекта будет http://server/jane/project.
GitLab — веб-инструмент жизненного цикла DevOps с открытым исходным кодом, представляющий систему управления репозиториями кода для Git с собственной вики, системой отслеживания ошибок, CI/CD пайплайном и другими функциями. Код изначально был написан на Ruby,
 а некоторые его части были позже переписаны на Go


ДОПОЛНИТЕЛЬНО
git remote Команда git remote позволяет создавать, просматривать и удалять подключения к другим репозиториям это интерфейс для управления списком записей об удаленных подключениях, которые хранятся в файле /.git/config репозитория.
git stash Команда git stash позволяет на время «сдать в архив» (или отложить) изменения, сделанные в рабочей копии, чтобы вы могли применить их позже. Откладывание изменений полезно, если вам необходимо переключить контекст и вы пока не готовы к созданию коммита.
git rebase Перебазирование — это процесс перемещения последовательности коммитов к новому базовому коммиту или их объединение. Операцию перебазирования удобнее всего применить и отобразить в контексте создания функциональных веток. В общих чертах процесс можно представить следующим образом:
Перебазирование — это процесс перемещения последовательности коммитов к новому базовому коммиту или их объединение. Операцию перебазирования удобнее всего применить и отобразить в контексте создания функциональных веток. В общих чертах процесс можно представить следующим образом:
git revert Отмена публичного коммита с помощью git revert git revert — это операция для безопасной отмены изменений, действие которой направлено в будущее. Для отката изменений команда не удаляет из истории коммиты или родительские элементы, a создает новый коммит с отменой нужных действий. Использовать команду git revert безопаснее, потому что она не создает угрозу потери кода
git tag Как и большинство СКВ,
 Git имеет возможность помечать определённые моменты в истории как важные. Как правило, 
эта функциональность используется для отметки моментов выпуска версий (v1.0, и т. п.). Такие пометки в Git называются тегами.
 В этом разделе вы узнаете, как посмотреть имеющиеся теги, как создать новые или удалить существующие, а также какие типы тегов существуют в Git.
git tag просмотр списка тегов

git config
просмотр парметров конфирурации ее настройки и проч проч
git-config - Получить и установить репозиторий или глобальные параметры













